import React, { useState } from "react";
import { FaTimes } from "react-icons/fa";

const AddProcessPopup = ({ showPopup, setShowPopup, onProcessAdded }) => {
  const [newProcess, setNewProcess] = useState({
    projectId: "",
    receivedDate: "",
    dueDate: "",
  });

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
  const handleAddProcess = async () => {
    if (!newProcess.projectId || !newProcess.receivedDate || !newProcess.dueDate) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    try {
      const response = await fetch("https://serversistomat-90ef5fb4c2ca.herokuapp.com/api/projects/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newProcess),
      });

      if (!response.ok) {
        throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }

      alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setShowPopup(false);
      setNewProcess({ projectId: "", receivedDate: "", dueDate: "" });

      if (onProcessAdded) {
        onProcessAdded(); // üìå ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh data ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      }
    } catch (error) {
      console.error(error);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏î‡πâ");
    }
  };

  if (!showPopup) return null; // ‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á Popup ‡∏ñ‡πâ‡∏≤ showPopup ‡πÄ‡∏õ‡πá‡∏ô false

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white p-6 rounded-md shadow-md w-96">
        {/* ‚úÖ Header Popup */}
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-bold">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà</h2>
          <FaTimes className="text-gray-500 cursor-pointer" onClick={() => setShowPopup(false)} />
        </div>

        {/* ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <div className="space-y-3">
          <div>
            <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</label>
            <input
              type="text"
              placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
              className="border p-2 w-full rounded-md text-sm mt-1"
              value={newProcess.projectId}
              onChange={(e) => setNewProcess({ ...newProcess, projectId: e.target.value })}
            />
          </div>

          <div>
            <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô</label>
            <input
              type="date"
              className="border p-2 w-full rounded-md text-sm mt-1"
              value={newProcess.receivedDate}
              onChange={(e) => setNewProcess({ ...newProcess, receivedDate: e.target.value })}
            />
          </div>

          <div>
            <label className="text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô</label>
            <input
              type="date"
              className="border p-2 w-full rounded-md text-sm mt-1"
              value={newProcess.dueDate}
              onChange={(e) => setNewProcess({ ...newProcess, dueDate: e.target.value })}
            />
          </div>
        </div>

        {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
        <div className="flex justify-end mt-4">
          <button className="bg-green-600 text-white px-4 py-2 rounded-md text-sm" onClick={handleAddProcess}>
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
        </div>
      </div>
    </div>
  );
};

export default AddProcessPopup;